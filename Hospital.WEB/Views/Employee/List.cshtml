@model Hospital.WEB.Models.ViewModels.EmployeeViewModels.EmployeeListViewModel

@{
	ViewBag.Title = "List Employees";
}

<h2>List Employees</h2>

<p>
	@Html.ActionLink("Create New", "Create")
</p>
<div>
	@using (Html.BeginForm("List", "Employee", FormMethod.Get))
	{
		@Html.AntiForgeryToken()

		<div class="col-md-10">
			@Html.LabelFor(model => model.EmployeeSort, "Employee sort", new { @class = "control-label col-md-2" })
			@Html.EnumDropDownListFor(model => model.EmployeeSort, new { @class = "form-control col-md-4" })
			<input type="submit" value="Sort" class="btn btn-default col-md-offset-1 col-md-3" />
		</div>
	}
</div>
<table class="table">
	<tr>
		<th>
			@Html.DisplayNameFor(model => model.Employees.FirstOrDefault().UserName)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Employees.FirstOrDefault().Birthday)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Employees.FirstOrDefault().PhoneNumber)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Employees.FirstOrDefault().Email)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Employees.FirstOrDefault().Address)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.Employees.FirstOrDefault().CategoryId)
		</th>
		<th>Count Patients</th>
		<th></th>
	</tr>

	@foreach (var item in Model.Employees)
	{
		<tr>
			<td>
				@Html.DisplayFor(modelItem => item.UserName)
			</td>
			<td>
				@item.Birthday.ToString("dd.MM.yyyy")
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.PhoneNumber)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Email)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Address)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Category.Name)
			</td>
			<td>
				@item.Patients.Count
			</td>
			<td>
				@Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
				@Html.ActionLink("Details", "Details", new { id = item.Id }) |
				@Html.ActionLink("Delete", "Delete", new { id = item.Id })
			</td>
		</tr>
	}

</table>
<br />
<div class="btn-group">
	@Html.PageLinks(Model.PageInfo, x => Url.Action("List", new { employeeSort = Model.EmployeeSort, page = x }))
</div>